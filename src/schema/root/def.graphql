
scalar JSON
scalar Date
scalar Time
scalar DateTime
scalar URL
scalar AbsoluteURL
scalar RelativeURL

input UserInput {
  userId: ID
}

input UserListInput {
  userIds: [ID]
}

input AddFriendInput {
  userId: ID!
  friendId: ID!
}

input AddGameInput {
  gameTitle: String
}

input EditGameInput {
  id: ID!
  gameTitle: String
}

input AddGamePlatformInput {
  platformName: String
}

input EditGamePlatformInput {
  id: ID!
  platformName: String
}

input AddGamePlayedInput {
  userId: ID!
  gameId: ID!
  gamePlatformId: ID
  gamerTag: String
}

input EditGamePlayedInput {
  id: ID!
  userId: ID
  gameId: ID
  gamePlatformId: ID
  gamerTag: String
}

type UserLastSeenAtResult {
  userId: ID!
  lastSeenAt: DateTime
}

type AddFriendResult {
  userId: ID
  friendId: ID
}

type Query {
  # Fetch all users
  users: [User]

  # Fetch all user login records
  logins: [UserLogin]

  # Fetch all games
  games: [Game]

  # Fetch all game platforms
  gamePlatforms: [GamePlatform]

  # Fetch all games played
  gamesPlayed: [GamePlayed]

  # Fetch a specific user by ID
  user(id: ID!): User

  # Fetch the current logged-in user
  currentUser: User
}

type Mutation {
  # Sets the "last_seen_at" timestamp to "now" for the specified user, which is
  # then used to determine whether the user is "online" or "offline".
  bumpUserLastSeenAt(id: ID!): UserLastSeenAtResult

  # Adds a friend to a user
  addFriendToUser(input: AddFriendInput!): AddFriendResult

  # Randomly generate a new user and add to specified user's friends list
  createFriendForUser(id: ID!): User

  # Adds a new game
  addGame(input: AddGameInput!): Game

  # Adds a new game platform
  addGamePlatform(input: AddGamePlatformInput!): GamePlatform

  # Adds a game that a user has played
  addGamePlayed(input: AddGamePlayedInput!): GamePlayed

  # Edits an existing game
  editGame(input: EditGameInput!): Game

  # Edits an existing game platform
  editGamePlatform(input: EditGamePlatformInput!): GamePlatform

  # Edits an existing game that a user has played
  editGamePlayed(input: EditGamePlayedInput!): GamePlayed

  # Deletes an existing game that a user has played
  deleteGamePlayed(id: ID!): ID
}

type Subscription {
  # Is triggered when a user's "last_seen_at" timestamp is updated
  userLastSeenAtChanged: UserLastSeenAtResult
}
